package travix.commands;

import tink.cli.Rest;

using sys.FileSystem;
using StringTools;

class HashLinkCommand extends Command {

  var hlCommand = "hl";
  
  public function install() {
    if(!Travix.isTravis || !supported())
      return;

    if(Travix.isMac) {
      // V1.3 only supports byte code generated by Haxe 4.0.0-preview.1 and 4.0.0-preview.2
      exec('wget', ['https://github.com/HaxeFoundation/hashlink/releases/download/1.3/hl-1.3-osx32.zip']);
      exec('unzip', ['hl-1.3-osx32.zip']);
      
      // workaround for: 'dyld: Library not loaded: libhl.dylib' ...  Reason: image not found
      exec('install_name_tool', ['-change', 'libhl.dylib', "hl-1.3-osx32/libhl.dylib".fullPath(), 'hl-1.3-osx32/hl']);
      
      hlCommand = "hl-1.3-osx32/hl";
      exec('chmod', ['u+x', hlCommand]);
    } 
    
    if(Travix.isLinux) {
      var hlvers = '1.8';
      var hlver = '$hlvers.0';
      exec('wget', ['https://github.com/HaxeFoundation/hashlink/archive/$hlvers.tar.gz']);
      exec('tar', ['xvzf', 'hl-$hlver-linux.tgz']);
      exec('sed', ['-i', "'s/LIBS=/#LIBS=/g'", 'makefile']); // comment out optional libs
      exec('make');
      exec('mkdir', ['hl-$hlver-linux']);
      exec('cp', ['hl', 'hl-$hlver-linux']);
      exec('cp', ['libhl.so', 'hl-$hlver-linux']);
      exec('cp', ['-r', 'include', 'hl-$hlver-linux']);
      
      // workaround for "error while loading shared libraries: libhl.so cannot open shared object file: No such file or directory"
      Sys.putEnv('LD_LIBRARY_PATH', 'hl-$hlver-linux'.fullPath());
      
      hlCommand = 'hl-$hlver-linux/hl';
      exec('chmod', ['u+x', hlCommand]);
    }
  }

  public function buildAndRun(rest:Rest<String>) {
    if(!supported()) return;
    build('hl', ['-hl', 'bin/hl/tests.hl'].concat(rest), function () {
      exec(hlCommand, ['bin/hl/tests.hl']);
    });
  }
  
  function getHaxeVersion() {
    var proc = new sys.io.Process('haxe', ['-version']);
    var stdout = proc.stdout.readAll().toString().replace('\n', '');
    var stderr = proc.stderr.readAll().toString().replace('\n', '');
    
    return switch stdout.split('+')[0].trim() + stderr.split('+')[0].trim() {
      case '4.0.0 (git build master @ 2344f23)': '4.0.0-preview.1';
      case '4.0.0 (git build development @ a018cbd)': '4.0.0-preview.2';
      case v: v;
    }
  }
  
  function supported() {
    var haxeVersion = getHaxeVersion();
    var supported = false;
    if(Travix.isMac) {
      switch haxeVersion {
        case '4.0.0-preview.1' | '4.0.0-preview.2': supported = true;
        case _:
      } 
    }
    if(Travix.isLinux) {
      switch haxeVersion {
        case '4.0.0-preview.5': supported = true;
        case _:
      }
    }
    
    if(!supported) travix.Logger.println('travix hl is not supported on Haxe $haxeVersion, skipping...');
    return supported;
  }
}
